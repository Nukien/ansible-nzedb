---

# This will be replaced with a letsencrypt role
# https://community.letsencrypt.org/t/simple-guide-using-lets-encrypt-ssl-certs-with-dovecot/2921/6
#
# https://serverfault.com/questions/845766/generating-a-self-signed-cert-with-openssl-that-works-in-chrome-58
#
# https://zonena.me/2016/02/creating-ssl-certificates-in-3-easy-steps/

- block:

  - name: Get hash of existing rootCA cert
    command: openssl x509 -hash -noout -in {{ ssl_certs_rootCA_cert }}
    register: rootCA_hash
    changed_when: false
    when: force_update

  - name: Remove existing cert files if force_update == true
    file:
      path: "{{ item }}"
      state: absent
    with_items:
      - "{{ ssl_certs_rootCA_key }}"
      - "{{ ssl_certs_rootCA_cert }}"
      - "/etc/ssl/certs/{{ rootCA_hash.stdout }}.0"
      - "{{ ssl_certs_privkey_path }}"
      - "{{ ssl_certs_csr_path }}"
      - "{{ ssl_certs_cert_path }}"
    when: force_update

  - name: Install openssl
    apt:
      name: "{{ item }}"
      state: present
    with_items:
      - openssl
      - python-openssl
      - ssl-cert

  - name: Ensure ssl folder exists
    file:
      path: "{{ ssl_certs_path }}"
      state: directory
      owner: "{{ ssl_certs_path_owner }}"
      group: "{{ ssl_certs_path_group }}"
      mode: "{{ ssl_certs_mode }}"

  - name: Generate main rootCA private key
    openssl_privatekey:
      size: 4096
      force: no
      path: "{{ ssl_certs_rootCA_key }}"

  - name: Generate main server private key
    openssl_privatekey:
      size: 4096
      force: no
      path: "{{ ssl_certs_privkey_path }}"

  - name: Generate main rootCA cert
    command: openssl req -new -x509 -days {{ ssl_certs_days }} -nodes -subj "{{ ssl_certs_fields }}" -out {{ ssl_certs_rootCA_cert }} -key {{ ssl_certs_rootCA_key }}
    args:
      creates: "{{ ssl_certs_rootCA_cert }}"

  - name: Get hash of rootCA cert
    command: openssl x509 -hash -noout -in {{ ssl_certs_rootCA_cert }}
    register: rootCA_hash
    changed_when: false
 
  - name: Create rootCA cert hash link
    file:
      src: "{{ ssl_certs_rootCA_cert }}"
      dest: "/etc/ssl/certs/{{ rootCA_hash.stdout }}.0"
      state: link

# openssl_csr available in 2.4, not in 2.3.1 :(
#  - name: Generate stunnel4 csr
#    openssl_csr:
#      path: /etc/ssl/stunnel4.csr
#      privatekey_path: /etc/ssl/private/stunnel4.pem
  - name: Generate main csr
    command: openssl req -new -sha256 -subj "{{ ssl_certs_fields }}" -key {{ ssl_certs_privkey_path }} -out {{ ssl_certs_csr_path }}
    args:
      creates: "{{ ssl_certs_csr_path }}"

  - name: Generate signed cert from csr
    command: openssl x509 -req -in {{ ssl_certs_csr_path }} -CA {{ ssl_certs_rootCA_cert }} -CAkey {{ ssl_certs_rootCA_key }} -CAcreateserial -out {{ ssl_certs_cert_path }} -days {{ ssl_certs_days }}
    args:
      creates: "{{ ssl_certs_cert_path }}"

#  - name: Generate self-signed SSL certificate
#    command: openssl req -nodes -x509 -sha256 -days {{ ssl_certs_days }} -in {{ ssl_certs_csr_path }} -key {{ ssl_certs_privkey_path }} -out {{ ssl_certs_cert_path }} -extensions v3_ca
#    args:
#      creates: "{{ ssl_certs_cert_path }}"

  # PEM fie is used by ZNC
  - name: Create PEM file with key, crt and rootCA
    shell: cat {{ ssl_certs_privkey_path }} {{ ssl_certs_cert_path }} {{ ssl_certs_rootCA_cert }} > {{ ssl_certs_pem_path }}
    args:
      creates: "{{ ssl_certs_pem_path }}"

  - name: RSA key files ownership
    file:
      path: "{{ item }}"
      owner: "{{ ssl_certs_path_owner }}"
      group: "{{ ssl_certs_path_group }}"
      mode: "{{ ssl_certs_mode }}"
    with_items:
      - "{{ ssl_certs_rootCA_key }}"
      - "{{ ssl_certs_rootCA_cert }}"
      - "{{ ssl_certs_privkey_path }}"
      - "{{ ssl_certs_csr_path }}"
      - "{{ ssl_certs_cert_path }}"
      - "{{ ssl_certs_pem_path }}"

#  - name: Create {{ domain }}.pem
#    shell: 'cat /etc/ssl/private/{{ domain }}.key /etc/ssl/{{ domain }}.csr > /etc/ssl/certs/{{ domain }}.pem'
#    args:
#      creates: /etc/ssl/certs/{{ domain }}.pem

  - name: Generate strong DHE parameter - https://weakdh.org/
    command: openssl dhparam -out {{ssl_certs_dhparam_path}} {{ssl_certs_dhparam_size}}
    args:
      creates: "{{ssl_certs_dhparam_path}}"
    when: ssl_certs_generate_dh_param
  #
  check_mode: no
